{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "organisation": {
      "type": "string",
      "metadata": {
        "description": "The organisation that the resource group or resource is owned by. Descriptive, used for metadata."
      },
      "allowedValues": [
        "Team KDA"
      ],
      "defaultValue": "Team KDA"
    },
    "organisationCode": {
      "type": "string",
      "metadata": {
        "description": "The organisation that the resource group or resource is owned by. Short, used for resource naming."
      },
      "allowedValues": [
        "kda"
      ],
      "defaultValue": "kda"
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "Whether this resource is Dev/Test/Prod/etc."
      },
      "allowedValues": [
        "LOCAL",
        "DEVELOPMENT",
        "TEST",
        "PRODUCTION",
        "ALL"
      ],
      "defaultValue": "DEVELOPMENT"
    },
    "environmentCode": {
      "type": "string",
      "metadata": {
        "description": "Whether this resource is Dev/Test/Prod/etc."
      },
      "allowedValues": [
        "lcl",
        "dev",
        "tst",
        "prd",
        "all"
      ],
      "defaultValue": "dev"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The region where Application Insights instance is hosted."
      },
      "allowedValues": [
        "australiasoutheast",
        "australiaeast",
        "southcentralus",
        "[resourceGroup().location]"
      ],
      "defaultValue": "[resourceGroup().location]"
    },
    "locationCode": {
      "type": "string",
      "metadata": {
        "description": "The Azure region that the resource is deployed to."
      },
      "allowedValues": [
        "ase",
        "aue",
        "usc"
      ],
      "defaultValue": "ase"
    },

    "projectName": {
      "type": "string",
      "metadata": {
        "description": "The name of the project the resource group or resource was provisioned for."
      },
      "defaultValue": "NOT_SET"
    },

    "storageAccountResourceTypeSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix of resource type to identify multiple resources in case same resource type exists. eg) 01, 02, etc..."
      },
      "defaultValue": ""
    },
    "storageAccountOperation": {
      "type": "string",
      "metadata": {
        "description": "The name of operation that the function app performs. eg) common, sales, etc..."
      },
      "defaultValue": ""
    },
    "storageAccountSkuName": {
      "type": "string",
      "metadata": {
        "description": "SKU Name for the Storage Account"
      },
      "defaultValue": "Standard_LRS"
    },
    "storageAccountSkuTier": {
      "type": "string",
      "metadata": {
        "description": "SKU Tier for the Storage Account"
      },
      "defaultValue": "Standard"
    },

    "cosmosDbResourceTypeSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix of resource type to identify multiple resources in case same resource type exists. eg) 01, 02, etc..."
      },
      "defaultValue": ""
    },
    "cosmosDbOperation": {
      "type": "string",
      "metadata": {
        "description": "The name of operation that the function app performs. eg) common, sales, etc..."
      },
      "defaultValue": ""
    },
    "cosmosDbOfferType": {
      "type": "string",
      "metadata": {
        "description": "The Cosmos DB offer type for this account."
      },
      "defaultValue": "Standard"
    },
    "cosmosDbConsistencyLevel": {
      "type": "string",
      "metadata": {
        "description": "The Cosmos DB default consistency level for this account."
      },
      "allowedValues": [
        "Eventual",
        "Strong",
        "Session",
        "BoundedStaleness"
      ],
      "defaultValue": "Session"
    },
    "cosmosDbMaxStalenessPrefix": {
      "type": "int",
      "metadata": {
        "description": "When consistencyLevel is set to BoundedStaleness, then this value is required, otherwise it can be ignored."
      },
      "minValue": 10,
      "maxValue": 1000,
      "defaultValue": 10
    },
    "cosmosDbMaxIntervalInSeconds": {
      "type": "int",
      "metadata": {
        "description": "When consistencyLevel is set to BoundedStaleness, then this value is required, otherwise it can be ignored."
      },
      "minValue": 5,
      "maxValue": 600,
      "defaultValue": 10
    },
    "cosmosDbPrimaryFailOverLocations": {
      "type": "string",
      "metadata": {
        "description": "Datacentre location based on the failover priority"
      },
      "defaultValue": "Australia Southeast"
    },
    "cosmosDbSecondaryFailOverLocations": {
      "type": "string",
      "metadata": {
        "description": "Datacentre locations based on the failover priority"
      },
      "defaultValue": "Australia East"
    }
  },
  "variables": {
    "deployments": {
      "apiVersion": "[providers('Microsoft.Resources', 'deployments').apiVersions[0]]",
      "templateLink": {
        "uri": "https://raw.githubusercontent.com/TeamKDA/KorDevAus/master/src/Resources/{0}.json"
      },
      "storageAccount": "[concat('storageaccount-', guid(resourceGroup().id, deployment().name))]",
      "cosmosDb": "[concat('cosmosdb-', guid(resourceGroup().id, deployment().name))]"
    },
    "common": {
      "organisation": "[parameters('organisation')]",
      "organisationCode": "[parameters('organisationCode')]",
      "environment": "[parameters('environment')]",
      "environmentCode": "[parameters('environmentCode')]",
      "location": "[parameters('location')]",
      "locationCode": "[parameters('locationCode')]",
      "projectName": "[parameters('projectName')]"
    },
    "storageAccount": {
      "resourceTypeSuffix": "[parameters('storageAccountResourceTypeSuffix')]",
      "operation": "[parameters('storageAccountOperation')]",
      "sku": {
        "name": "[parameters('storageAccountSkuName')]",
        "tier": "[parameters('storageAccountSkuTier')]"
      }
    },
    "cosmosDb": {
      "resourceTypeSuffix": "[parameters('storageAccountResourceTypeSuffix')]",
      "operation": "[parameters('storageAccountOperation')]",
      "offerType": "[parameters('cosmosDbOfferType')]",
      "consistencyLevel": "[parameters('cosmosDbConsistencyLevel')]",
      "maxStalenessPrefix": "[parameters('cosmosDbMaxStalenessPrefix')]",
      "maxIntervalInSeconds": "[parameters('cosmosDbMaxIntervalInSeconds')]",
      "failOverLocations": [
        {
          "locationName": "[parameters('cosmosDbPrimaryFailOverLocations')]",
          "failoverPriority": 0
        },
        {
          "locationName": "[parameters('cosmosDbSecondaryFailOverLocations')]",
          "failoverPriority": 1
        }
      ]
    }
  },
  "resources": [
    {
      "comments": "### RESOURCE - STORAGE ACCOUNT ###",
      "apiVersion": "[variables('deployments').apiVersion]",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('deployments').storageAccount]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[replace(variables('deployments').templateLink.uri, '{0}', 'StorageAccounts')]"
        },
        "parameters": {
          "organisation": {
            "value": "[variables('common').organisation]"
          },
          "organisationCode": {
            "value": "[variables('common').organisationCode]"
          },
          "environment": {
            "value": "[variables('common').environment]"
          },
          "environmentCode": {
            "value": "[variables('common').environmentCode]"
          },
          "location": {
            "value": "[variables('common').location]"
          },
          "locationCode": {
            "value": "[variables('common').locationCode]"
          },
          "resourceTypeSuffix": {
            "value": "[variables('storageAccount').resourceTypeSuffix]"
          },
          "operation": {
            "value": "[variables('storageAccount').operation]"
          },
          "projectName": {
            "value": "[variables('common').projectName]"
          },
          "storageAccountSkuName": {
            "value": "[variables('storageAccount').sku.name]"
          },
          "storageAccountSkuTier": {
            "value": "[variables('storageAccount').sku.tier]"
          }
        }
      }
    },
    {
      "comments": "### RESOURCE - COSMOS DB ACCOUNT ###",
      "apiVersion": "[variables('deployments').apiVersion]",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('deployments').cosmosDb]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[replace(variables('deployments').templateLink.uri, '{0}', 'CosmosDb')]"
        },
        "parameters": {
          "organisation": {
            "value": "[variables('common').organisation]"
          },
          "organisationCode": {
            "value": "[variables('common').organisationCode]"
          },
          "environment": {
            "value": "[variables('common').environment]"
          },
          "environmentCode": {
            "value": "[variables('common').environmentCode]"
          },
          "location": {
            "value": "[variables('common').location]"
          },
          "locationCode": {
            "value": "[variables('common').locationCode]"
          },
          "resourceTypeSuffix": {
            "value": "[variables('cosmosDb').resourceTypeSuffix]"
          },
          "operation": {
            "value": "[variables('cosmosDb').operation]"
          },
          "projectName": {
            "value": "[variables('common').projectName]"
          },
          "offerType": {
            "value": "[variables('cosmosDb').offerType]"
          },
          "consistencyLevel": {
            "value": "[variables('cosmosDb').consistencyLevel]"
          },
          "maxStalenessPrefix": {
            "value": "[variables('cosmosDb').maxStalenessPrefix]"
          },
          "maxIntervalInSeconds": {
            "value": "[variables('cosmosDb').maxIntervalInSeconds]"
          },
          "failOverLocations": {
            "value": "[variables('cosmosDb').failOverLocations]"
          }
        }
      }
    }
  ],
  "outputs": {}
}
