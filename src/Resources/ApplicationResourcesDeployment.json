{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "organisation": {
      "type": "string",
      "metadata": {
        "description": "The organisation that the resource group or resource is owned by. Descriptive, used for metadata."
      },
      "allowedValues": [
        "Team KDA"
      ],
      "defaultValue": "Team KDA"
    },
    "organisationCode": {
      "type": "string",
      "metadata": {
        "description": "The organisation that the resource group or resource is owned by. Short, used for resource naming."
      },
      "allowedValues": [
        "kda"
      ],
      "defaultValue": "kda"
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "Whether this resource is Dev/Test/Prod/etc."
      },
      "allowedValues": [
        "LOCAL",
        "DEVELOPMENT",
        "TEST",
        "PRODUCTION",
        "ALL"
      ],
      "defaultValue": "DEVELOPMENT"
    },
    "environmentCode": {
      "type": "string",
      "metadata": {
        "description": "Whether this resource is Dev/Test/Prod/etc."
      },
      "allowedValues": [
        "lcl",
        "dev",
        "tst",
        "prd",
        "all"
      ],
      "defaultValue": "dev"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The region where this resource is hosted."
      },
      "allowedValues": [
        "australiasoutheast",
        "australiaeast",
        "southcentralus",
        "[resourceGroup().location]"
      ],
      "defaultValue": "[resourceGroup().location]"
    },
    "locationCode": {
      "type": "string",
      "metadata": {
        "description": "The Azure region that this resource is deployed to."
      },
      "allowedValues": [
        "ase",
        "aue",
        "usc"
      ],
      "defaultValue": "ase"
    },

    "projectName": {
      "type": "string",
      "metadata": {
        "description": "The name of the project the resource group or resource was provisioned for."
      },
      "defaultValue": "NOT_SET"
    },

    "keyVaultResourceTypeSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix of resource type to identify multiple resources in case same resource type exists. eg) 01, 02, etc..."
      },
      "defaultValue": ""
    },
    "keyVaultOperation": {
      "type": "string",
      "metadata": {
        "description": "The name of operation that the resource performs. eg) common, sales, etc..."
      },
      "defaultValue": ""
    },
    "keyVaultSkuName": {
      "type": "string",
      "metadata": {
        "description": "SKU name for Key Vault"
      },
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "defaultValue": "Standard"
    },
    "keyVaultSkuFamily": {
      "type": "string",
      "metadata": {
        "description": "SKU family for Key Vault"
      },
      "defaultValue": "A"
    },
    "keyVaultEnabledForDeployment": {
      "type": "bool",
      "metadata": {
        "description": "Specifies if the vault is enabled for a VM deployment"
      },
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": false
    },
    "keyVaultEnabledForDiskEncryption": {
      "type": "bool",
      "metadata": {
        "description": "Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
      },
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": false
    },
    "keyVaultEnabledForTemplateDeployment": {
      "type": "bool",
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      },
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": true
    },
    "keyVaultSpnObjectIdVsts": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the VSTS SPN AD user. Get using Get-AzureRmADUser or Get-AzureRmADServicePrincipal cmdlets"
      }
    },
    "keyVaultSpnObjectIdKeyVault": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the KeyVault SPN AD user. Get using Get-AzureRmADUser or Get-AzureRmADServicePrincipal cmdlets"
      }
    },
    "keyVaultKeysPermissions": {
      "type": "string",
      "metadata": {
        "description": "Comma delimited permissions to keys in the vault. Valid values are: all, create, import, update, get, list, delete, backup, restore, encrypt, decrypt, wrapkey, unwrapkey, sign, and verify."
      },
      "defaultValue": "all"
    },
    "keyVaultSecretsPermissions": {
      "type": "string",
      "metadata": {
        "description": "Comma delimited permissions to secrets in the vault. Valid values are: all, get, set, list, and delete."
      },
      "defaultValue": "all"
    },

    "storageAccountResourceTypeSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix of resource type to identify multiple resources in case same resource type exists. eg) 01, 02, etc..."
      },
      "defaultValue": ""
    },
    "storageAccountOperation": {
      "type": "string",
      "metadata": {
        "description": "The name of operation that the resource performs. eg) common, sales, etc..."
      },
      "defaultValue": ""
    },
    "storageAccountSkuName": {
      "type": "string",
      "metadata": {
        "description": "SKU Name for the Storage Account"
      },
      "defaultValue": "Standard_LRS"
    },
    "storageAccountSkuTier": {
      "type": "string",
      "metadata": {
        "description": "SKU Tier for the Storage Account"
      },
      "defaultValue": "Standard"
    },

    "cosmosDbResourceTypeSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix of resource type to identify multiple resources in case same resource type exists. eg) 01, 02, etc..."
      },
      "defaultValue": ""
    },
    "cosmosDbOperation": {
      "type": "string",
      "metadata": {
        "description": "The name of operation that the resource performs. eg) common, sales, etc..."
      },
      "defaultValue": ""
    },
    "cosmosDbOfferType": {
      "type": "string",
      "metadata": {
        "description": "The Cosmos DB offer type for this account."
      },
      "defaultValue": "Standard"
    },
    "cosmosDbConsistencyLevel": {
      "type": "string",
      "metadata": {
        "description": "The Cosmos DB default consistency level for this account."
      },
      "allowedValues": [
        "Eventual",
        "Strong",
        "Session",
        "BoundedStaleness"
      ],
      "defaultValue": "Session"
    },
    "cosmosDbMaxStalenessPrefix": {
      "type": "int",
      "metadata": {
        "description": "When consistencyLevel is set to BoundedStaleness, then this value is required, otherwise it can be ignored."
      },
      "minValue": 10,
      "maxValue": 1000,
      "defaultValue": 10
    },
    "cosmosDbMaxIntervalInSeconds": {
      "type": "int",
      "metadata": {
        "description": "When consistencyLevel is set to BoundedStaleness, then this value is required, otherwise it can be ignored."
      },
      "minValue": 5,
      "maxValue": 600,
      "defaultValue": 10
    },
    "cosmosDbPrimaryFailOverLocations": {
      "type": "string",
      "metadata": {
        "description": "Datacentre location based on the failover priority"
      },
      "defaultValue": "Australia Southeast"
    },
    "cosmosDbSecondaryFailOverLocations": {
      "type": "string",
      "metadata": {
        "description": "Datacentre locations based on the failover priority"
      },
      "defaultValue": "Australia East"
    },

    "appInsightsLocation": {
      "type": "string",
      "metadata": {
        "description": "The region where the resource is hosted."
      },
      "allowedValues": [
        "southcentralus"
      ],
      "defaultValue": "southcentralus"
    },
    "appInsightsLocationCode": {
      "type": "string",
      "metadata": {
        "description": "The Azure region that the resource is deployed to."
      },
      "allowedValues": [
        "usc"
      ],
      "defaultValue": "usc"
    },
    "appInsightsResourceTypeSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix of resource type to identify multiple resources in case same resource type exists. eg) 01, 02, etc..."
      },
      "defaultValue": ""
    },
    "appInsightsOperation": {
      "type": "string",
      "metadata": {
        "description": "The name of operation that the resource performs. eg) common, sales, etc..."
      },
      "defaultValue": ""
    },
    "appInsightsKind": {
      "type": "string",
      "metadata": {
        "description": "The type of Application Insights instance."
      },
      "allowedValues": [
        "other",
        "web"
      ],
      "defaultValue": "web"
    },

    "appServicePlanResourceTypeSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix of resource type to identify multiple resources in case same resource type exists. eg) 01, 02, etc..."
      },
      "defaultValue": ""
    },
    "appServicePlanOperation": {
      "type": "string",
      "metadata": {
        "description": "The name of operation that the resource performs. eg) common, sales, etc..."
      },
      "defaultValue": ""
    },
    "appServicePlanSkuName": {
      "type": "string",
      "metadata": {
        "description": "The name of SKU for App Service Plan."
      },
      "defaultValue": "S1"
    },
    "appServicePlanSkuTier": {
      "type": "string",
      "metadata": {
        "description": "The tier of SKU for App Service Plan."
      },
      "defaultValue": "Standard"
    },
    "appServicePlanSkuSize": {
      "type": "string",
      "metadata": {
        "description": "The size of SKU for App Service Plan."
      },
      "defaultValue": "S1"
    },
    "appServicePlanSkuFamily": {
      "type": "string",
      "metadata": {
        "description": "The family of SKU for App Service Plan."
      },
      "defaultValue": "S"
    },
    "appServicePlanSkuCapacity": {
      "type": "int",
      "metadata": {
        "description": "The capacity of SKU for App Service Plan."
      },
      "defaultValue": 1
    },

    "webAppResourceTypeSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix of resource type to identify multiple resources in case same resource type exists. eg) 01, 02, etc..."
      },
      "defaultValue": ""
    },
    "webAppOperation": {
      "type": "string",
      "metadata": {
        "description": "The name of operation that the resource performs. eg) common, sales, etc..."
      },
      "defaultValue": ""
    },
    "webAppRemoteDebuggingEnabled": {
      "type": "bool",
      "metadata": {
        "description": "The value indicating whether to enable remote debugging or not."
      },
      "defaultValue": false
    },
    "webAppRemoteDebuggingVersion": {
      "type": "string",
      "metadata": {
        "description": "The Visual Studio version of remote deubgging"
      },
      "allowedValues": [
        "VS2012",
        "VS2013",
        "VS2015",
        "VS2017"
      ],
      "defaultValue": "VS2017"
    },
    "webAppUse32bitWorkerProcess": {
      "type": "bool",
      "metadata": {
        "description": "The value indicating whether to use 32bit worker process or not."
      },
      "defaultValue": true
    }
  },
  "variables": {
    "resourceNameLongTemplate": "[toLower(concat('{0}', '-', parameters('organisationCode'), '-', parameters('environmentCode'), '-', parameters('locationCode'), '-', '{1}'))]",
    "resourceNameShortTemplate": "[replace(variables('resourceNameLongTemplate'), '-', '')]",
    "deployments": {
      "apiVersion": "[providers('Microsoft.Resources', 'deployments').apiVersions[0]]",
      "templateLink": {
        "uri": "https://raw.githubusercontent.com/TeamKDA/KorDevAus/master/src/Resources/{0}.json"
      },
      "keyVault": "[concat('keyvault-', guid(resourceGroup().id, deployment().name))]",
      "storageAccount": "[concat('storageaccount-', guid(resourceGroup().id, deployment().name))]",
      "cosmosDb": "[concat('cosmosdb-', guid(resourceGroup().id, deployment().name))]",
      "appInsights": "[concat('appinsights-', guid(resourceGroup().id, deployment().name))]",
      "appServicePlan": "[concat('appserviceplan-', guid(resourceGroup().id, deployment().name))]",
      "webApp": "[concat('webapp-', guid(resourceGroup().id, deployment().name))]"
    },
    "common": {
      "organisation": "[parameters('organisation')]",
      "organisationCode": "[parameters('organisationCode')]",
      "environment": "[parameters('environment')]",
      "environmentCode": "[parameters('environmentCode')]",
      "location": "[parameters('location')]",
      "locationCode": "[parameters('locationCode')]",
      "projectName": "[parameters('projectName')]"
    },
    "keyVault": {
      "resourceTypeSuffix": "[parameters('keyVaultResourceTypeSuffix')]",
      "operation": "[parameters('keyVaultOperation')]",
      "sku": {
        "name": "[parameters('keyVaultSkuName')]",
        "family": "[parameters('keyVaultSkuFamily')]"
      },
      "enabledForDeployment": "[parameters('keyVaultEnabledForDeployment')]",
      "enabledForDiskEncryption": "[parameters('keyVaultEnabledForDiskEncryption')]",
      "enabledForTemplateDeployment": "[parameters('keyVaultEnabledForTemplateDeployment')]",
      "accessPolicies": {
        "spnObjectIds": {
          "vsts": "[parameters('keyVaultSpnObjectIdVsts')]",
          "keyVault": "[parameters('keyVaultSpnObjectIdKeyVault')]"
        },
        "permissions": {
          "keys": "[parameters('keyVaultKeysPermissions')]",
          "secrets": "[parameters('keyVaultSecretsPermissions')]"
        }
      }
    },
    "storageAccount": {
      "resourceTypeSuffix": "[parameters('storageAccountResourceTypeSuffix')]",
      "operation": "[parameters('storageAccountOperation')]",
      "sku": {
        "name": "[parameters('storageAccountSkuName')]",
        "tier": "[parameters('storageAccountSkuTier')]"
      }
    },
    "cosmosDb": {
      "resourceTypeSuffix": "[parameters('cosmosDbResourceTypeSuffix')]",
      "operation": "[parameters('cosmosDbOperation')]",
      "offerType": "[parameters('cosmosDbOfferType')]",
      "consistencyLevel": "[parameters('cosmosDbConsistencyLevel')]",
      "maxStalenessPrefix": "[parameters('cosmosDbMaxStalenessPrefix')]",
      "maxIntervalInSeconds": "[parameters('cosmosDbMaxIntervalInSeconds')]",
      "failOverLocations": [
        {
          "locationName": "[parameters('cosmosDbPrimaryFailOverLocations')]",
          "failoverPriority": 0
        },
        {
          "locationName": "[parameters('cosmosDbSecondaryFailOverLocations')]",
          "failoverPriority": 1
        }
      ]
    },
    "appInsights": {
      "resourceId": "[resourceId('Microsoft.Insights/components', replace(replace(replace(variables('resourceNameLongTemplate'), '{0}', concat('appins', parameters('appInsightsResourceTypeSuffix'))), '{1}', parameters('appInsightsOperation')), concat('-', parameters('locationCode'), '-'), concat('-', parameters('appInsightsLocationCode'), '-')))]",
      "apiVersion": "[providers('Microsoft.Insights', 'components').apiVersions[0]]",
      "location": "[parameters('appInsightsLocation')]",
      "locationCode": "[parameters('appInsightsLocationCode')]",
      "resourceTypeSuffix": "[parameters('appInsightsResourceTypeSuffix')]",
      "operation": "[parameters('appInsightsOperation')]",
      "kind": "[parameters('appInsightsKind')]"
    },
    "appServicePlan": {
      "resourceTypeSuffix": "[parameters('appServicePlanResourceTypeSuffix')]",
      "operation": "[parameters('appServicePlanOperation')]",
      "sku": {
        "name": "[parameters('appServicePlanSkuName')]",
        "tier": "[parameters('appServicePlanSkuTier')]",
        "size": "[parameters('appServicePlanSkuSize')]",
        "family": "[parameters('appServicePlanSkuFamily')]",
        "capacity": "[parameters('appServicePlanSkuCapacity')]"
      }
    },
    "webApp": {
      "resourceTypeSuffix": "[parameters('webAppResourceTypeSuffix')]",
      "operation": "[parameters('webAppOperation')]",
      "remoteDebuggingEnabled": "[parameters('webAppRemoteDebuggingEnabled')]",
      "remoteDebuggingVersion": "[parameters('webAppRemoteDebuggingVersion')]",
      "use32bitWorkerProcess": "[parameters('webAppUse32bitWorkerProcess')]"
    }
  },
  "resources": [
    {
      "comments": "### RESOURCE - KEY VAULT ###",
      "apiVersion": "[variables('deployments').apiVersion]",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('deployments').keyVault]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[replace(variables('deployments').templateLink.uri, '{0}', 'KeyVault')]"
        },
        "parameters": {
          "organisation": {
            "value": "[variables('common').organisation]"
          },
          "organisationCode": {
            "value": "[variables('common').organisationCode]"
          },
          "environment": {
            "value": "[variables('common').environment]"
          },
          "environmentCode": {
            "value": "[variables('common').environmentCode]"
          },
          "location": {
            "value": "[variables('common').location]"
          },
          "locationCode": {
            "value": "[variables('common').locationCode]"
          },
          "resourceTypeSuffix": {
            "value": "[variables('keyVault').resourceTypeSuffix]"
          },
          "operation": {
            "value": "[variables('keyVault').operation]"
          },
          "projectName": {
            "value": "[variables('common').projectName]"
          },
          "keyVaultSkuName": {
            "value": "[variables('keyVault').sku.name]"
          },
          "keyVaultSkuFamily": {
            "value": "[variables('keyVault').sku.family]"
          },
          "enableVaultForDeployment": {
            "value": "[variables('keyVault').enabledForDeployment]"
          },
          "enableVaultForDiskEncryption": {
            "value": "[variables('keyVault').enabledForDiskEncryption]"
          },
          "enabledForTemplateDeployment": {
            "value": "[variables('keyVault').enabledForTemplateDeployment]"
          },
          "spnObjectIdVsts": {
            "value": "[variables('keyVault').accessPolicies.spnObjectIds.vsts]"
          },
          "spnObjectIdKeyVaultReader": {
            "value": "[variables('keyVault').accessPolicies.spnObjectIds.keyVault]"
          },
          "keysPermissions": {
            "value": "[variables('keyVault').accessPolicies.permissions.keys]"
          },
          "secretsPermissions": {
            "value": "[variables('keyVault').accessPolicies.permissions.secrets]"
          }
        }
      }
    },
    {
      "comments": "### RESOURCE - STORAGE ACCOUNT ###",
      "apiVersion": "[variables('deployments').apiVersion]",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('deployments').storageAccount]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[replace(variables('deployments').templateLink.uri, '{0}', 'StorageAccounts')]"
        },
        "parameters": {
          "organisation": {
            "value": "[variables('common').organisation]"
          },
          "organisationCode": {
            "value": "[variables('common').organisationCode]"
          },
          "environment": {
            "value": "[variables('common').environment]"
          },
          "environmentCode": {
            "value": "[variables('common').environmentCode]"
          },
          "location": {
            "value": "[variables('common').location]"
          },
          "locationCode": {
            "value": "[variables('common').locationCode]"
          },
          "resourceTypeSuffix": {
            "value": "[variables('storageAccount').resourceTypeSuffix]"
          },
          "operation": {
            "value": "[variables('storageAccount').operation]"
          },
          "projectName": {
            "value": "[variables('common').projectName]"
          },
          "storageAccountSkuName": {
            "value": "[variables('storageAccount').sku.name]"
          },
          "storageAccountSkuTier": {
            "value": "[variables('storageAccount').sku.tier]"
          }
        }
      }
    },
    {
      "comments": "### RESOURCE - COSMOS DB ACCOUNT ###",
      "apiVersion": "[variables('deployments').apiVersion]",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('deployments').cosmosDb]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[replace(variables('deployments').templateLink.uri, '{0}', 'CosmosDb')]"
        },
        "parameters": {
          "organisation": {
            "value": "[variables('common').organisation]"
          },
          "organisationCode": {
            "value": "[variables('common').organisationCode]"
          },
          "environment": {
            "value": "[variables('common').environment]"
          },
          "environmentCode": {
            "value": "[variables('common').environmentCode]"
          },
          "location": {
            "value": "[variables('common').location]"
          },
          "locationCode": {
            "value": "[variables('common').locationCode]"
          },
          "resourceTypeSuffix": {
            "value": "[variables('cosmosDb').resourceTypeSuffix]"
          },
          "operation": {
            "value": "[variables('cosmosDb').operation]"
          },
          "projectName": {
            "value": "[variables('common').projectName]"
          },
          "offerType": {
            "value": "[variables('cosmosDb').offerType]"
          },
          "consistencyLevel": {
            "value": "[variables('cosmosDb').consistencyLevel]"
          },
          "maxStalenessPrefix": {
            "value": "[variables('cosmosDb').maxStalenessPrefix]"
          },
          "maxIntervalInSeconds": {
            "value": "[variables('cosmosDb').maxIntervalInSeconds]"
          },
          "failOverLocations": {
            "value": "[variables('cosmosDb').failOverLocations]"
          }
        }
      }
    },
    {
      "comments": "### RESOURCE - APPLICATION INSIGHTS ###",
      "apiVersion": "[variables('deployments').apiVersion]",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('deployments').appInsights]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[replace(variables('deployments').templateLink.uri, '{0}', 'ApplicationInsights')]"
        },
        "parameters": {
          "organisation": {
            "value": "[variables('common').organisation]"
          },
          "organisationCode": {
            "value": "[variables('common').organisationCode]"
          },
          "environment": {
            "value": "[variables('common').environment]"
          },
          "environmentCode": {
            "value": "[variables('common').environmentCode]"
          },
          "location": {
            "value": "[variables('appInsights').location]"
          },
          "locationCode": {
            "value": "[variables('appInsights').locationCode]"
          },
          "resourceTypeSuffix": {
            "value": "[variables('appInsights').resourceTypeSuffix]"
          },
          "operation": {
            "value": "[variables('appInsights').operation]"
          },
          "projectName": {
            "value": "[variables('common').projectName]"
          },
          "appInsightsKind": {
            "value": "[variables('appInsights').kind]"
          }
        }
      }
    },
    {
      "comments": "### RESOURCE - APP SERVICE PLAN ###",
      "apiVersion": "[variables('deployments').apiVersion]",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('deployments').appServicePlan]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[replace(variables('deployments').templateLink.uri, '{0}', 'AppServicePlan')]"
        },
        "parameters": {
          "organisation": {
            "value": "[variables('common').organisation]"
          },
          "organisationCode": {
            "value": "[variables('common').organisationCode]"
          },
          "environment": {
            "value": "[variables('common').environment]"
          },
          "environmentCode": {
            "value": "[variables('common').environmentCode]"
          },
          "location": {
            "value": "[variables('common').location]"
          },
          "locationCode": {
            "value": "[variables('common').locationCode]"
          },
          "resourceTypeSuffix": {
            "value": "[variables('appServicePlan').resourceTypeSuffix]"
          },
          "operation": {
            "value": "[variables('appServicePlan').operation]"
          },
          "projectName": {
            "value": "[variables('common').projectName]"
          },
          "skuName": {
            "value": "[variables('appServicePlan').sku.name]"
          },
          "skuTier": {
            "value": "[variables('appServicePlan').sku.tier]"
          },
          "skuSize": {
            "value": "[variables('appServicePlan').sku.size]"
          },
          "skuFamily": {
            "value": "[variables('appServicePlan').sku.family]"
          },
          "skuCapacity": {
            "value": "[variables('appServicePlan').sku.capacity]"
          }
        }
      }
    },
    {
      "comments": "### RESOURCE - WEB APP ###",
      "apiVersion": "[variables('deployments').apiVersion]",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('deployments').webApp]",
      "dependsOn": [
        "[variables('deployments').appInsights]",
        "[variables('deployments').appServicePlan]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[replace(variables('deployments').templateLink.uri, '{0}', 'WebApp')]"
        },
        "parameters": {
          "organisation": {
            "value": "[variables('common').organisation]"
          },
          "organisationCode": {
            "value": "[variables('common').organisationCode]"
          },
          "environment": {
            "value": "[variables('common').environment]"
          },
          "environmentCode": {
            "value": "[variables('common').environmentCode]"
          },
          "location": {
            "value": "[variables('common').location]"
          },
          "locationCode": {
            "value": "[variables('common').locationCode]"
          },
          "resourceTypeSuffix": {
            "value": "[variables('webApp').resourceTypeSuffix]"
          },
          "operation": {
            "value": "[variables('webApp').operation]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference(variables('appInsights').resourceId, variables('appInsights').apiVersion).instrumentationKey]"
          },
          "remoteDebuggingEnabled": {
            "value": "[variables('webApp').remoteDebuggingEnabled]"
          },
          "remoteDebuggingVersion": {
            "value": "[variables('webApp').remoteDebuggingVersion]"
          },
          "use32bitWorkerProcess": {
            "value": "[variables('webApp').use32bitWorkerProcess]"
          }
        }
      }
    }
  ],
  "outputs": {}
}
