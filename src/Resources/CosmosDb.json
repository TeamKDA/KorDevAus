{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "organisation": {
      "type": "string",
      "metadata": {
        "description": "The organisation that the resource group or resource is owned by. Descriptive, used for metadata."
      },
      "allowedValues": [
        "Team KDA"
      ],
      "defaultValue": "Team KDA"
    },
    "organisationCode": {
      "type": "string",
      "metadata": {
        "description": "The organisation that the resource group or resource is owned by. Short, used for resource naming."
      },
      "allowedValues": [
        "kda"
      ],
      "defaultValue": "kda"
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "Whether this resource is Dev/Test/Prod/etc."
      },
      "allowedValues": [
        "LOCAL",
        "DEVELOPMENT",
        "TEST",
        "PRODUCTION",
        "ALL"
      ],
      "defaultValue": "DEVELOPMENT"
    },
    "environmentCode": {
      "type": "string",
      "metadata": {
        "description": "Whether this resource is Dev/Test/Prod/etc."
      },
      "allowedValues": [
        "lcl",
        "dev",
        "tst",
        "prd",
        "all"
      ],
      "defaultValue": "dev"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The region where Application Insights instance is hosted."
      },
      "allowedValues": [
        "australiasoutheast",
        "australiaeast",
        "southcentralus",
        "[resourceGroup().location]"
      ],
      "defaultValue": "[resourceGroup().location]"
    },
    "locationCode": {
      "type": "string",
      "metadata": {
        "description": "The Azure region that the resource is deployed to."
      },
      "allowedValues": [
        "ase",
        "aue",
        "usc"
      ],
      "defaultValue": "ase"
    },
    "resourceTypeSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix of resource type to identify multiple resources in case same resource type exists. eg) 01, 02, etc..."
      },
      "defaultValue": ""
    },
    "operation": {
      "type": "string",
      "metadata": {
        "description": "The name of operation that the function app performs. eg) common, sales, etc..."
      },
      "defaultValue": ""
    },

    "projectName": {
      "type": "string",
      "metadata": {
        "description": "The name of the project the resource group or resource was provisioned for."
      },
      "defaultValue": "NOT_SET"
    },

    "offerType": {
      "type": "string",
      "metadata": {
        "description": "The Cosmos DB offer type for this account."
      },
      "defaultValue": "Standard"
    },
    "consistencyLevel": {
      "type": "string",
      "metadata": {
        "description": "The Cosmos DB default consistency level for this account."
      },
      "allowedValues": [
        "Eventual",
        "Strong",
        "Session",
        "BoundedStaleness"
      ],
      "defaultValue": "Session"
    },
    "maxStalenessPrefix": {
      "type": "int",
      "metadata": {
        "description": "When consistencyLevel is set to BoundedStaleness, then this value is required, otherwise it can be ignored."
      },
      "minValue": 10,
      "maxValue": 1000,
      "defaultValue": 10
    },
    "maxIntervalInSeconds": {
      "type": "int",
      "metadata": {
        "description": "When consistencyLevel is set to BoundedStaleness, then this value is required, otherwise it can be ignored."
      },
      "minValue": 5,
      "maxValue": 600,
      "defaultValue": 10
    },
    "failOverLocations": {
      "type": "array",
      "metadata": {
        "description": "Datacentre locations based on the failover priority"
      },
      "defaultValue": [
        {
          "locationName": "Australia Southeast",
          "failoverPriority": 0
        },
        {
          "locationName": "Australia East",
          "failoverPriority": 1
        }
      ]
    }
  },
  "variables": {
    "resourceNameLongTemplate": "[toLower(concat('{0}', '-', parameters('organisationCode'), '-', parameters('environmentCode'), '-', parameters('locationCode')))]",
    "resourceNameShortTemplate": "[replace(variables('resourceNameLongTemplate'), '-', '')]",
    "cosmosDb": {
      "name": "[replace(variables('resourceNameLongTemplate'), '{0}', concat('cosdba', parameters('resourceTypeSuffix')))]",
      "apiVersion": "[providers('Microsoft.DocumentDB', 'databaseAccounts').apiVersions[0]]",
      "location": "[parameters('location')]",
      "offerType": "[parameters('offerType')]",
      "defaultConsistencyLevel": "[parameters('consistencyLevel')]",
      "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
      "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]",
      "failOverLocations": "[parameters('failOverLocations')]"
    },
    "tags": {
      "organisation": "[parameters('organisation')]",
      "environment": "[parameters('environment')]",
      "projectName": "[parameters('projectName')]"
    }
  },
  "resources": [
    {
      "comments": " = = = Cosmos DB Account = = = ",
      "apiVersion": "[variables('cosmosDb').apiVersion]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('cosmosDb').name]",
      "location": "[variables('cosmosDb').location]",
      "tags": "[variables('tags')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "name": "[variables('cosmosDb').name]",
        "databaseAccountOfferType": "[variables('cosmosDb').offerType]",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "[variables('cosmosDb').defaultConsistencyLevel]",
          "maxStalenessPrefix": "[variables('cosmosDb').maxStalenessPrefix]",
          "maxIntervalInSeconds": "[variables('cosmosDb').maxIntervalInSeconds]"
        }
      }
    }
  ],
  "outputs": {
    "documentEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDb').name)).documentEndpoint]"
    },
    "accountKey": {
      "type": "string",
      "value": "[listkeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDb').name), variables('cosmosDb').apiVersion).primaryMasterKey]"
    },
    "connectionString": {
      "type": "string",
      "value": "[concat('AccountEndpoint=https://', variables('cosmosDb').name, '.documents.azure.com:443/;AccountKey=', listkeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDb').name), variables('cosmosDb').apiVersion).primaryMasterKey, ';')]"
    }
  }
}
