{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "organisation": {
      "type": "string",
      "metadata": {
        "description": "The organisation that the resource group or resource is owned by. Descriptive, used for metadata."
      },
      "allowedValues": [
        "Team KDA"
      ],
      "defaultValue": "Team KDA"
    },
    "organisationCode": {
      "type": "string",
      "metadata": {
        "description": "The organisation that the resource group or resource is owned by. Short, used for resource naming."
      },
      "allowedValues": [
        "kda"
      ],
      "defaultValue": "kda"
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "Whether this resource is Dev/Test/Prod/etc."
      },
      "allowedValues": [
        "LOCAL",
        "DEVELOPMENT",
        "TEST",
        "PRODUCTION",
        "ALL"
      ],
      "defaultValue": "DEVELOPMENT"
    },
    "environmentCode": {
      "type": "string",
      "metadata": {
        "description": "Whether this resource is Dev/Test/Prod/etc."
      },
      "allowedValues": [
        "lcl",
        "dev",
        "tst",
        "prd",
        "all"
      ],
      "defaultValue": "dev"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The region where Application Insights instance is hosted."
      },
      "allowedValues": [
        "australiasoutheast",
        "australiaeast",
        "southcentralus",
        "[resourceGroup().location]"
      ],
      "defaultValue": "[resourceGroup().location]"
    },
    "locationCode": {
      "type": "string",
      "metadata": {
        "description": "The Azure region that the resource is deployed to."
      },
      "allowedValues": [
        "ase",
        "aue",
        "usc"
      ],
      "defaultValue": "ase"
    },
    "resourceTypeSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix of resource type to identify multiple resources in case same resource type exists. eg) 01, 02, etc..."
      },
      "defaultValue": ""
    },
    "operation": {
      "type": "string",
      "metadata": {
        "description": "The name of operation that the resource performs. eg) common, sales, etc..."
      },
      "defaultValue": ""
    },

    "projectName": {
      "type": "string",
      "metadata": {
        "description": "The name of the project the resource group or resource was provisioned for."
      },
      "defaultValue": "NOT_SET"
    },

    "keyVaultSkuName": {
      "type": "string",
      "metadata": {
        "description": "SKU name for Key Vault"
      },
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "defaultValue": "Standard"
    },
    "keyVaultSkuFamily": {
      "type": "string",
      "metadata": {
        "description": "SKU family for Key Vault"
      },
      "defaultValue": "A"
    },
    "enabledForDeployment": {
      "type": "bool",
      "metadata": {
        "description": "Specifies if the vault is enabled for a VM deployment"
      },
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": false
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "metadata": {
        "description": "Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
      },
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": false
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      },
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": true
    },
    "spnObjectIdVsts": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the VSTS SPN AD user. Get using Get-AzureRmADUser or Get-AzureRmADServicePrincipal cmdlets"
      }
    },
    "spnObjectIdKeyVaultReader": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the KeyVault Reader SPN AD user. Get using Get-AzureRmADUser or Get-AzureRmADServicePrincipal cmdlets"
      }
    },
    "keysPermissions": {
      "type": "string",
      "metadata": {
        "description": "Comma delimited permissions to keys in the vault. Valid values are: all, create, import, update, get, list, delete, backup, restore, encrypt, decrypt, wrapkey, unwrapkey, sign, and verify."
      },
      "defaultValue": "all"
    },
    "secretsPermissions": {
      "type": "string",
      "metadata": {
        "description": "Comma delimited permissions to secrets in the vault. Valid values are: all, get, set, list, and delete."
      },
      "defaultValue": "all"
    }
  },
  "variables": {
    "resourceNameLongTemplate": "[toLower(concat('{0}', '-', parameters('organisationCode'), '-', parameters('environmentCode'), '-', parameters('locationCode')))]",
    "resourceNameShortTemplate": "[replace(variables('resourceNameLongTemplate'), '-', '')]",
    "keyVault": {
      "name": "[replace(variables('resourceNameShortTemplate'), '{0}', concat('kv', parameters('resourceTypeSuffix')))]",
      "apiVersion": "[providers('Microsoft.KeyVault', 'vaults').apiVersions[0]]",
      "location": "[parameters('location')]",
      "tenantId": "[subscription().tenantId]",
      "sku": {
        "name": "[parameters('keyVaultSkuName')]",
        "family": "[parameters('keyVaultSkuFamily')]"
      },
      "enabledForDeployment": "[parameters('enabledForDeployment')]",
      "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
      "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
      "accessPolicies": {
        "spnObjectIds": {
          "vsts": "[parameters('spnObjectIdVsts')]",
          "keyVaultReader": "[parameters('spnObjectIdKeyVaultReader')]"
        },
        "permissions": {
          "keys": "[split(parameters('keysPermissions'), ',')]",
          "secrets": "[split(parameters('secretsPermissions'), ',')]"
        }
      }
    },
    "workspace": {
      "name": "[replace(variables('resourceNameLongTemplate'), '{0}', concat('omslog', parameters('resourceTypeSuffix')))]",
      "resourceGroup": "[replace(variables('resourceNameLongTemplate'), '{0}', 'resgrp')]"
    },
    "diagnostics": {
      "apiVersion": "[providers('Microsoft.Insights', 'diagnosticSettings').apiVersions[0]]",
      "location": "[parameters('location')]",
      "workspaceId": "[resourceId(variables('workspace').resourceGroup, 'Microsoft.OperationalInsights/workspaces/', variables('workspace').name)]"
    },
    "tags": {
      "organisation": "[parameters('organisation')]",
      "environment": "[parameters('environment')]",
      "projectName": "[parameters('projectName')]"
    }
  },
  "resources": [
    {
      "comments": " = = = Key Vault = = = ",
      "apiVersion": "[variables('keyVault').apiVersion]",
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVault').name]",
      "location": "[variables('keyVault').location]",
      "tags": "[variables('tags')]",
      "properties": {
        "tenantId": "[variables('keyVault').tenantId]",
        "sku": {
          "name": "[variables('keyVault').sku.name]",
          "family": "[variables('keyVault').sku.family]"
        },
        "enabledForDeployment": "[variables('keyVault').enabledForDeployment]",
        "enabledForDiskEncryption": "[variables('keyVault').enabledForDiskEncryption]",
        "enabledForTemplateDeployment": "[variables('keyVault').enabledForTemplateDeployment]",
        "accessPolicies": [
          {
            "tenantId": "[variables('keyVault').tenantId]",
            "objectId": "[variables('keyVault').accessPolicies.spnObjectIds.vsts]",
            "permissions": {
              "keys": "[variables('keyVault').accessPolicies.permissions.keys]",
              "secrets": "[variables('keyVault').accessPolicies.permissions.secrets]"
            }
          },
          {
            "tenantId": "[variables('keyVault').tenantId]",
            "objectId": "[variables('keyVault').accessPolicies.spnObjectIds.keyVaultReader]",
            "permissions": {
              "keys": "[variables('keyVault').accessPolicies.permissions.keys]",
              "secrets": "[variables('keyVault').accessPolicies.permissions.secrets]"
            }
          }
        ]
      }
    },
    {
      "comments": " = = = Diagnostic Settings for Key Vault = = = ",
      "apiVersion": "[variables('diagnostics').apiVersion]",
      "type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
      "name": "[concat(variables('keyVault').name, '/Microsoft.Insights/service')]",
      "location": "[variables('diagnostics').location]",
      "dependsOn": [
        "[variables('keyVault').name]"
      ],
      "properties": {
        "workspaceId": "[variables('diagnostics').workspaceId]",
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": 30
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVault').name]"
    }
  }
}
